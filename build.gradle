/*
 * Copyright (C) 2020 Markus Fleischhacker <markus.fleischhacker28@gmail.com>
 *
 * This file is part of Bounding Box Editor
 *
 * Bounding Box Editor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Bounding Box Editor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Bounding Box Editor. If not, see <http://www.gnu.org/licenses/>.
 */
buildscript {
    dependencies {
        classpath 'com.github.fgiannesini.libsass.gradle.plugin:libsass-gradle-plugin:+'
    }
}

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'com.github.ben-manes.versions' version '0.33.0'
    id 'org.beryx.jlink' version '2.22.0'
    id 'jacoco'
    id 'net.ltgt.errorprone' version '1.2.1'
    id 'org.sonarqube' version '3.0'
    id 'org.ysb33r.cloudci' version '3.0.0'
    id 'com.github.hierynomus.license' version '0.15.0'
}

apply plugin: 'com.github.fgiannesini.libsass.gradle.plugin'

version '2.1.1'

sourceCompatibility = 1.11

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // Junit (Unit testing)
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'

    // TestFx UI TesTing // https://mvnrepository.com/artifact/org.testfx/testfx-junit5
    testImplementation('org.testfx:testfx-junit5:4.0.16-alpha') {
        exclude group: 'org.hamcrest'
    }

    // Hamcrest https://mvnrepository.com/artifact/org.hamcrest/hamcrest
    testImplementation 'org.hamcrest:hamcrest:2.2'

    // Commons Collections https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    implementation 'org.apache.commons:commons-collections4:4.4'

    // Commons Lang https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.11'

    // ControlsFX https://mvnrepository.com/artifact/org.controlsfx/controlsfx
    implementation('org.controlsfx:controlsfx:11.0.2') {
        exclude group: 'org.openjfx'
    }

    // Caffeine https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine
    implementation 'com.github.ben-manes.caffeine:caffeine:2.8.5'

    // Gradle plugin to use the error-prone compiler https://github.com/tbroyer/gradle-errorprone-plugin
    errorprone 'com.google.errorprone:error_prone_core:2.4.0'

    // Google GSON https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.8.6'
}

javafx {
    version = '15'
    // javafx.swing necessary for screenshot capturing in tests
    modules = ['javafx.controls', 'javafx.swing']
}

test {
    useJUnitPlatform()

    jvmArgs = ['-Dtestfx.robot=awt', '-Dprism.forceGPU=true']
    maxHeapSize = '3072m'

    moduleOptions {
        runOnClasspath = true
    }

    finalizedBy jacocoTestReport
}

ci {
    githubactions {
        test {
            systemProperty "fullScreenTests", false
            jvmArgs = ['-Dprism.verbose=true']

            if(org.gradle.internal.os.OperatingSystem.current().macOsX) {
                // Currently there is no support for running UI tests on macOS in a VM via github-actions.
                useJUnitPlatform {
                    excludeTags 'ui'
                }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
    }
}

libSassParameters {
    inputFilePath = "${projectDir}/src/main/resources/stylesheets/scss/styles.scss"
    outputFilePath = "${projectDir}/src/main/resources/stylesheets/css/styles.css"
    watchedDirectoryPath = "scss"
    sourceComments = true
}

compileJava {
    options.compilerArgs.addAll(['-Xlint:all', '-Xlint:-requires-automatic'])
}

compileJava.finalizedBy('compileLibSass')

application {
    mainModule = "boundingboxeditor"
    mainClass = "boundingboxeditor.BoundingBoxEditorApp"
    applicationDefaultJvmArgs = ['-Dprism.forceGPU=true']
}

java {
    modularity.inferModulePath = true
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'BoundingBoxEditor'
        jvmArgs = ['-Dprism.forceGPU=true']
    }

    imageZip = project.file("${buildDir}/distributions/boundingboxeditor-${javafx.platform.classifier}.zip")

    jpackage {
        installerOptions += [
                '--app-version', version,
                '--copyright', 'Copyright 2020, Markus Fleischhacker',
                '--description', 'Graphical image annotation application',
                '--license-file', 'LICENSE',
                '--vendor', 'Markus Fleischhacker',
        ]

        if(org.gradle.internal.os.OperatingSystem.current().windows) {
            installerOptions += [
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-menu-group', 'BoundingBoxEditor',
                    '--win-shortcut'
            ]
            icon = 'src/main/resources/icons/app_icon.ico'
            installerType = 'exe'
        } else if(org.gradle.internal.os.OperatingSystem.current().linux) {
            installerOptions += [
                    '--resource-dir', 'build/jpackage/BoundingBoxEditor/lib',
                    '--linux-shortcut',
                    '--linux-menu-group', 'Graphics',
                    '--linux-deb-maintainer', 'markus.fleischhacker28@gmail.com'
            ]
            icon = 'src/main/resources/icons/app_icon.png'
        } else if(org.gradle.internal.os.OperatingSystem.current().macOsX) {
            icon = 'src/main/resources/icons/app_icon.icns'
        }

        // Allow to pass installer type as command line parameter:
        if(project.hasProperty('installerType')) {
            installerType = project.property('installerType')
        }
    }
}

task dist {
    dependsOn clean, jlinkZip
}

sonarqube {
    properties {
        property "sonar.projectKey", "mfl28_BoundingBoxEditor"
        property "sonar.organization", "mfl28"
    }
}

license {
    header = rootProject.file('gradle/LICENSE_HEADER')
    strictCheck = true

    mapping {
        scss = 'SLASHSTAR_STYLE'
        css = 'SLASHSTAR_STYLE'
        java = 'SLASHSTAR_STYLE'
    }

    excludes(['**/_*.scss', '**/styles.css', '**/testannotations/**/*', '**/testimages/**/*', '**/icons/*'])

    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.author = 'Markus Fleischhacker'
    ext.project = 'Bounding Box Editor'
    ext.email = 'markus.fleischhacker28@gmail.com'
}

